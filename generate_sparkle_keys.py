#!/usr/bin/env python3
"""
Script de g√©n√©ration de cl√©s EdDSA (Ed25519) pour Sparkle
G√©n√®re une paire de cl√©s publique/priv√©e compatible avec Sparkle
"""

import base64
import os
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ed25519

def generate_sparkle_keys():
    """G√©n√®re une paire de cl√©s EdDSA pour Sparkle"""
    print("üîê G√©n√©ration des cl√©s EdDSA pour Sparkle...")
    
    # G√©n√©rer la cl√© priv√©e Ed25519
    private_key = ed25519.Ed25519PrivateKey.generate()
    
    # Obtenir la cl√© publique
    public_key = private_key.public_key()
    
    # S√©rialiser la cl√© priv√©e en format PEM
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # S√©rialiser la cl√© publique en format raw bytes
    public_raw = public_key.public_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PublicFormat.Raw
    )
    
    # Encoder la cl√© publique en base64 pour Sparkle
    public_base64 = base64.b64encode(public_raw).decode('ascii')
    
    # Sauvegarder les cl√©s
    with open('sparkle_private_key.pem', 'wb') as f:
        f.write(private_pem)
    
    with open('sparkle_public_key.txt', 'w') as f:
        f.write(public_base64)
    
    print("‚úÖ Cl√©s g√©n√©r√©es avec succ√®s !")
    print(f"üìÅ Cl√© priv√©e sauvegard√©e : sparkle_private_key.pem")
    print(f"üìÅ Cl√© publique sauvegard√©e : sparkle_public_key.txt")
    print()
    print("üîß Configuration pour Xcode :")
    print(f"INFOPLIST_KEY_SUPublicEDKey = {public_base64}")
    print()
    print("‚ö†Ô∏è  S√âCURIT√â IMPORTANTE :")
    print("- Gardez sparkle_private_key.pem SECRET et S√âCURIS√â")
    print("- Ajoutez sparkle_private_key.pem √† votre .gitignore")
    print("- Utilisez la cl√© publique dans votre projet Xcode")
    print("- Utilisez la cl√© priv√©e pour signer vos builds de release")
    
    return public_base64, private_pem.decode('ascii')

if __name__ == "__main__":
    try:
        public_key, private_key = generate_sparkle_keys()
    except ImportError:
        print("‚ùå Module 'cryptography' manquant")
        print("üì¶ Installation : pip3 install cryptography")
        exit(1)
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration : {e}")
        exit(1) 