//
//  AppCoordinator.swift
//  Foundation
//
//  Coordinateur central de l'application Optima
//  G√®re l'√©tat global et orchestre les interactions entre modules
//

import SwiftUI
import Combine
import Sparkle

/// Coordinateur principal qui orchestre l'ensemble de l'application
/// Responsabilit√© : √âtat global, navigation, communication inter-modules
@MainActor
final class AppCoordinator: ObservableObject {
    
    // MARK: - √âtat de Navigation
    @Published var selectedView: MainView = .library
    @Published var selectedDocument: DocumentModel?
    @Published var showingImportSheet = false
    @Published var showingAIAssistant = false
    @Published var showingAIConfiguration = false
    @Published var showingSettings = false
    
    // MARK: - √âtat Application
    @Published var isInitialized = false
    @Published var currentUser: UserProfile?
    
    // MARK: - Services Centraux
    private let documentService = DocumentService()
    private let persistenceService = PersistenceService()
    let aiService = AIService() // Public pour acc√®s depuis les vues
    let analyticsService = AnalyticsService() // Public pour acc√®s depuis les vues
    
    // Contr√¥leur de mise √† jour Sparkle
    private let updaterController: SPUStandardUpdaterController
    
    /// Objet `updater` expos√© pour les vues SwiftUI
    var updater: SPUUpdater {
        updaterController.updater
    }
    
    // MARK: - Donn√©es Applicatives
    @Published var documents: [DocumentModel] = []
    @Published var isProcessingDocument = false
    
    init() {
        // Initialisation du contr√¥leur de mise √† jour Sparkle
        self.updaterController = SPUStandardUpdaterController(startingUpdater: true, updaterDelegate: nil, userDriverDelegate: nil)
        
        Task {
            await setupApplication()
        }
    }
    
    // MARK: - Configuration Initiale
    private func setupApplication() async {
        // Chargement initial des documents sauvegard√©s
        await loadExistingDocuments()
        
        // Chargement des donn√©es pour les analytics
        await loadAnalyticsData()
        
        // TODO: Chargement des pr√©f√©rences utilisateur
        // TODO: Configuration analytics
        
        await MainActor.run {
            isInitialized = true
        }
    }
    
    // MARK: - Actions Navigation
    func navigateTo(_ view: MainView) {
        // üîë CORRECTION : Fermer automatiquement l'assistant IA si on quitte la vue Lecteur.
        // Cela garantit que l'assistant, qui est contextuel au document,
        // ne reste pas ouvert de mani√®re incoh√©rente dans d'autres vues.
        if selectedView == .reader && view != .reader {
            showingAIAssistant = false
        }
        
        selectedView = view
    }
    
    func selectDocument(_ document: DocumentModel) {
        selectedDocument = document
        navigateTo(.reader)
    }
    
    // MARK: - Actions Application
    func showImportSheet() {
        // üîë CORRECTION : Navigation automatique vers la biblioth√®que + ouverture sheet
        navigateTo(.library)
        // Petit d√©lai pour permettre √† la vue de se charger avant d'ouvrir la sheet
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.showingImportSheet = true
        }
    }
    
    func hideImportSheet() {
        showingImportSheet = false
    }
    
    func toggleAIAssistant() {
        showingAIAssistant.toggle()
    }
    
    /// üîë CORRECTION SIMPLIFI√âE : Ouvre toujours l'assistant IA global
    /// L'assistant g√®re lui-m√™me la logique conditionnelle (API configur√©e ou non)
    func openAIAssistant() {
        // Toujours ouvrir l'assistant - il s'adapte automatiquement au contexte
        showingAIAssistant = true
    }
    
    /// üîë CORRECTION SIMPLIFI√âE : Toggle simple de l'assistant IA global
    func smartToggleAIAssistant() {
        if showingAIAssistant {
            // Si l'assistant est ouvert ‚Üí le fermer
            showingAIAssistant = false
        } else if showingAIConfiguration {
            // Si la configuration est ouverte ‚Üí la fermer et ouvrir l'assistant
            showingAIConfiguration = false
            showingAIAssistant = true
        } else {
            // Sinon ‚Üí ouvrir l'assistant
            showingAIAssistant = true
        }
    }
    
    func showAIConfiguration() {
        showingAIConfiguration = true
    }
    
    // MARK: - Gestion des Documents
    
    /// Met √† jour un document et sauvegarde les changements
    func updateAndSaveDocument(_ document: DocumentModel) async {
        if let index = documents.firstIndex(where: { $0.id == document.id }) {
            documents[index] = document
            await saveDocuments()
        }
    }
    
    func importDocument(from url: URL) async throws {
        isProcessingDocument = true
        defer { isProcessingDocument = false }
        
        let document = try await documentService.importDocument(from: url)
        documents.append(document)
        
        // üîë CORRECTION : Sauvegarde imm√©diate apr√®s import
        await saveDocuments()
        
        hideImportSheet()
    }
    
    func loadExistingDocuments() async {
        do {
            // üîë CORRECTION : Chargement r√©el des documents sauvegard√©s
            let savedDocuments = try await persistenceService.loadDocuments()
            
            await MainActor.run {
                self.documents = savedDocuments
                print("‚úÖ Charg√© \(savedDocuments.count) documents sauvegard√©s")
            }
        } catch {
            print("‚ö†Ô∏è Erreur chargement documents: \(error)")
            // En cas d'erreur, on garde une liste vide
            await MainActor.run {
                self.documents = []
            }
        }
    }
    
    func loadAnalyticsData() async {
        do {
            let sessions = try await persistenceService.loadStudySessions()
            analyticsService.process(sessions: sessions)
            print("‚úÖ Charg√© et trait√© \(sessions.count) sessions d'√©tude pour les analytics.")
        } catch {
            print("‚ö†Ô∏è Erreur chargement des sessions d'√©tude: \(error)")
        }
    }
    
    // MARK: - Sauvegarde Priv√©e
    
    /// Sauvegarde tous les documents sur disque
    private func saveDocuments() async {
        do {
            try await persistenceService.saveDocuments(documents)
            print("‚úÖ Documents sauvegard√©s avec succ√®s (\(documents.count) items)")
        } catch {
            print("‚ùå Erreur sauvegarde documents: \(error)")
        }
    }
    
    /// Sauvegarde forc√©e (appelable depuis l'ext√©rieur)
    func saveAllDocuments() async {
        await saveDocuments()
    }
    
    /// Sauvegarde une nouvelle session d'√©tude
    func saveStudySession(_ session: StudySession) async {
        do {
            try await persistenceService.appendStudySession(session)
            print("‚úÖ Session d'√©tude sauvegard√©e.")
            // Recharger les donn√©es pour mettre √† jour les graphiques
            await loadAnalyticsData()
        } catch {
            print("‚ùå Erreur sauvegarde session d'√©tude: \(error)")
        }
    }
    
    // MARK: - Gestion du Cycle de Vie Application
    
    /// Appel√© lors de la fermeture de l'application
    func applicationWillTerminate() async {
        print("üîÑ Sauvegarde avant fermeture...")
        await saveDocuments()
    }
    
    // MARK: - Nouvelles Actions Menu
    
    /// D√©marre une nouvelle session d'√©tude
    func startNewStudySession() {
        // Navigation vers la vue √âtude
        navigateTo(.study)
        
        // Si un document est s√©lectionn√©, ouvrir l'assistant IA apr√®s un court d√©lai
        if selectedDocument != nil {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                self.showingAIAssistant = true
            }
        }
    }
    
    /// Affiche l'assistant IA
    func showAIAssistant() {
        showingAIAssistant = true
    }
    
    /// Affiche la fen√™tre de pr√©f√©rences
    func showPreferences() {
        showingSettings = true
        print("üîß Ouverture de la fen√™tre Pr√©f√©rences manuelle")
    }
    
    /// Ouvre le guide utilisateur
    func openUserGuide() {
        // Ouvrir une page web d'aide
        if let url = URL(string: "https://github.com/optima-app/guide") {
            NSWorkspace.shared.open(url)
        }
    }
    
    /// V√©rifie les mises √† jour manuellement
    func checkForUpdates() {
        // La nouvelle vue de menu appelle directement l'action de l'updater.
        // On peut garder cette fonction pour des appels programmatiques si besoin.
        updaterController.checkForUpdates(nil)
    }
    
    /// Affiche les raccourcis clavier
    func showKeyboardShortcuts() {
        // TODO: Cr√©er une fen√™tre d√©di√©e aux raccourcis
        print("üìã Raccourcis clavier d'Optima")
        print("‚åòI - Importer un document")
        print("‚åòR - Nouvelle session d'√©tude")
        print("‚åò‚áßA - Assistant IA")
        print("‚åò‚áßS - Statistiques")
        print("‚åò1-4 - Navigation rapide")
        print("‚åòU - V√©rifier les mises √† jour")
        print("‚åò? - Ce guide")
    }
    

}

// MARK: - Types Navigation
enum MainView: String, CaseIterable, Identifiable {
    case library = "Biblioth√®que"
    case reader = "Lecteur"
    case generation = "G√©n√©ration"
    case study = "√âtude"
    case analytics = "Analytics"
    
    var id: String { rawValue }
    
    var systemImage: String {
        switch self {
        case .library: return "books.vertical"
        case .reader: return "doc.text"
        case .generation: return "wand.and.stars"
        case .study: return "brain.head.profile"
        case .analytics: return "chart.line.uptrend.xyaxis"
        }
    }
} 