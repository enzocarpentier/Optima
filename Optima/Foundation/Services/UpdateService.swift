//
//  UpdateService.swift
//  Foundation/Services
//
//  Service de gestion des mises √† jour automatiques avec Sparkle
//  Architecture robuste avec gestion d'erreurs et configuration flexible
//

import SwiftUI
import Sparkle
import Foundation

/// **Delegate Sparkle pour la gestion des callbacks**
/// 
/// Classe s√©par√©e pour g√©rer les callbacks Sparkle sans conflit MainActor
final class SparkleUpdateDelegate: NSObject, SPUUpdaterDelegate {
    weak var updateService: UpdateService?
    
    init(updateService: UpdateService?) {
        self.updateService = updateService
        super.init()
    }
    
    // Appel√© quand une v√©rification se termine avec succ√®s mais aucune mise √† jour trouv√©e
    func updaterDidNotFindUpdate(_ updater: SPUUpdater) {
        DispatchQueue.main.async {
            self.updateService?.handleUpdateCycleFinished(error: nil, hasUpdate: false)
        }
    }
    
    // Appel√© quand une v√©rification trouve une mise √† jour
    func updater(_ updater: SPUUpdater, didFindValidUpdate item: SUAppcastItem) {
        DispatchQueue.main.async {
            self.updateService?.handleUpdateCycleFinished(error: nil, hasUpdate: true)
        }
    }
    
    // Appel√© en cas d'erreur pendant le t√©l√©chargement d'une mise √† jour
    func updater(_ updater: SPUUpdater, failedToDownloadUpdate item: SUAppcastItem, error: Error) {
        DispatchQueue.main.async {
            self.updateService?.handleUpdateCycleFinished(error: error, hasUpdate: false)
        }
    }
    
    // Appel√© en cas d'erreur lors de la v√©rification du feed
    func updater(_ updater: SPUUpdater, didAbortWithError error: Error) {
        DispatchQueue.main.async {
            self.updateService?.handleUpdateCycleFinished(error: error, hasUpdate: false)
        }
    }
    
    // Appel√© avant qu'une mise √† jour soit install√©e
    func updater(_ updater: SPUUpdater, willInstallUpdate item: SUAppcastItem) {
        DispatchQueue.main.async {
            self.updateService?.handleWillInstallUpdate(version: item.versionString)
        }
    }
}

/// **Service central de gestion des mises √† jour Optima**
/// 
/// Ce service encapsule toute la logique de mise √† jour automatique via Sparkle.
/// Il garantit une exp√©rience utilisateur fluide et une gestion d'erreurs robuste.
/// 
/// **Fonctionnalit√©s principales :**
/// - V√©rification automatique au d√©marrage (configurable)
/// - V√©rification manuelle via menu
/// - Gestion des erreurs r√©seau et serveur
/// - Notifications utilisateur appropri√©es
/// - Respect des pr√©f√©rences utilisateur
@MainActor
final class UpdateService: ObservableObject {
    
    // MARK: - Configuration
    
    /// Flag pour √©viter les logs r√©p√©titifs d'initialisation
    private static var hasLoggedInitialization = false
    
    /// Protection contre les v√©rifications multiples
    private var hasPerformedStartupCheck = false
    private var lastManualCheckTime: Date?
    private var isManualCheck = false
    
    /// Contr√¥leur Sparkle principal
    private let updaterController: SPUStandardUpdaterController
    
    /// Delegate Sparkle
    private let sparkleDelegate: SparkleUpdateDelegate
    
    /// √âtat de la derni√®re v√©rification
    @Published var isCheckingForUpdates = false
    @Published var lastCheckDate: Date?
    @Published var lastError: UpdateError?
    
    // MARK: - Types d'Erreurs
    
    /// Erreurs sp√©cifiques aux mises √† jour
    enum UpdateError: LocalizedError {
        case networkUnavailable
        case feedNotFound
        case invalidResponse
        case noUpdatesAvailable
        case downloadFailed
        case installationFailed
        
        var errorDescription: String? {
            switch self {
            case .networkUnavailable:
                return "Impossible de v√©rifier les mises √† jour - pas de connexion internet"
            case .feedNotFound:
                return "Serveur de mises √† jour introuvable"
            case .invalidResponse:
                return "R√©ponse invalide du serveur de mises √† jour"
            case .noUpdatesAvailable:
                return "Aucune mise √† jour disponible - vous utilisez la derni√®re version"
            case .downloadFailed:
                return "√âchec du t√©l√©chargement de la mise √† jour"
            case .installationFailed:
                return "√âchec de l'installation de la mise √† jour"
            }
        }
    }
    
    // MARK: - Initialisation
    
    init() {
        // Initialiser les UserDefaults avec des valeurs par d√©faut si n√©cessaire
        Self.initializeUserDefaults()
        
        // Initialiser d'abord les propri√©t√©s stock√©es
        self.sparkleDelegate = SparkleUpdateDelegate(updateService: nil)
        self.updaterController = SPUStandardUpdaterController(
            startingUpdater: true,
            updaterDelegate: self.sparkleDelegate,
            userDriverDelegate: nil
        )
        
        // Maintenant configurer la r√©f√©rence circulaire
        self.sparkleDelegate.updateService = self
        
        // Configuration des param√®tres Sparkle
        configureSparkle()
        
        // Log d'initialisation uniquement la premi√®re fois
        if !Self.hasLoggedInitialization {
            print("‚úÖ UpdateService initialis√© avec succ√®s")
            Self.hasLoggedInitialization = true
        }
    }
    
    // MARK: - Configuration Priv√©e
    
    /// Initialise les UserDefaults avec des valeurs par d√©faut appropri√©es
    private static func initializeUserDefaults() {
        let defaults: [String: Any] = [
            "AutomaticUpdateCheck": true,    // Activ√© par d√©faut
            "AutomaticDownload": false       // D√©sactiv√© par d√©faut pour plus de contr√¥le
        ]
        
        // Ne pas √©craser les pr√©f√©rences existantes
        for (key, value) in defaults {
            if UserDefaults.standard.object(forKey: key) == nil {
                UserDefaults.standard.set(value, forKey: key)
            }
        }
        
        UserDefaults.standard.synchronize()
    }
    
    /// Configure les param√®tres avanc√©s de Sparkle
    private func configureSparkle() {
        let updater = updaterController.updater
        
        // Le delegate est d√©j√† configur√© via le constructeur SPUStandardUpdaterController
        // Pas besoin de le red√©finir ici
        
        // La configuration de l'URL du feed (SUFeedURL) est automatiquement lue
        // depuis le fichier Info.plist par Sparkle. Il n'est pas n√©cessaire de la d√©finir ici.
        
        // Configuration des v√©rifications automatiques
        updater.automaticallyChecksForUpdates = UserDefaults.standard.bool(forKey: "AutomaticUpdateCheck")
        
        // Intervalle de v√©rification (24 heures par d√©faut)
        updater.updateCheckInterval = 24 * 60 * 60 // 24 heures en secondes
        
        // T√©l√©chargement automatique des mises √† jour (optionnel)
        updater.automaticallyDownloadsUpdates = UserDefaults.standard.bool(forKey: "AutomaticDownload")
        
        // Log de configuration uniquement la premi√®re fois
        if !Self.hasLoggedInitialization {
            print("üîß Configuration Sparkle appliqu√©e (URL lue depuis Info.plist)")
            print("   - V√©rification auto: \(updater.automaticallyChecksForUpdates)")
            print("   - T√©l√©chargement auto: \(updater.automaticallyDownloadsUpdates)")
        }
    }
    
    // MARK: - Actions Publiques
    
    /// **V√©rification manuelle des mises √† jour**
    /// 
    /// Cette m√©thode est appel√©e depuis le menu "V√©rifier les mises √† jour"
    /// Elle fournit un feedback imm√©diat √† l'utilisateur
    func checkForUpdatesManually() {
        // Protection contre les appels trop fr√©quents (minimum 10 secondes)
        if let lastCheck = lastManualCheckTime, 
           Date().timeIntervalSince(lastCheck) < 10 {
            print("‚ö†Ô∏è V√©rification trop r√©cente, ignor√©e (attendez 10 secondes)")
            return
        }
        
        // √âviter les v√©rifications multiples simultan√©es
        guard !isCheckingForUpdates else {
            print("‚ö†Ô∏è V√©rification d√©j√† en cours, ignor√©e")
            return
        }
        
        isCheckingForUpdates = true
        isManualCheck = true
        lastError = nil
        lastManualCheckTime = Date()
        
        print("üîç V√©rification manuelle des mises √† jour d√©marr√©e...")
        
        // Utiliser l'API Sparkle standard
        let updater = updaterController.updater
        updater.checkForUpdates()
        
        // R√©initialisation de l'√©tat apr√®s un d√©lai (backup)
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
            if self.isCheckingForUpdates {
                self.isCheckingForUpdates = false
                self.isManualCheck = false
                self.lastCheckDate = Date()
            }
        }
    }
    
    /// **V√©rification automatique silencieuse au d√©marrage**
    /// 
    /// Cette m√©thode est appel√©e UNE SEULE FOIS au d√©marrage de l'application
    /// Elle ne d√©range pas l'utilisateur sauf si une mise √† jour est trouv√©e
    func checkForUpdatesAutomaticallyOnStartup() {
        // Protection : ne faire qu'une seule v√©rification au d√©marrage
        guard !hasPerformedStartupCheck else {
            print("‚úÖ V√©rification de d√©marrage d√©j√† effectu√©e, ignor√©e")
            return
        }
        
        let updater = updaterController.updater
        
        // Respecter les pr√©f√©rences utilisateur
        guard updater.automaticallyChecksForUpdates else {
            print("üì± V√©rification automatique d√©sactiv√©e par l'utilisateur")
            hasPerformedStartupCheck = true
            return
        }
        
        print("üîÑ V√©rification automatique unique des mises √† jour au d√©marrage...")
        
        // Marquer comme effectu√©e AVANT l'appel pour √©viter les doublons
        hasPerformedStartupCheck = true
        isManualCheck = false
        
        // V√©rification silencieuse en arri√®re-plan
        updater.checkForUpdatesInBackground()
        lastCheckDate = Date()
    }
    
    /// **V√©rification automatique p√©riodique (appel√©e par Sparkle)**
    /// 
    /// Cette m√©thode peut √™tre appel√©e p√©riodiquement par Sparkle selon la configuration
    /// Elle est silencieuse et respecte l'intervalle configur√©
    func checkForUpdatesAutomatically() {
        let updater = updaterController.updater
        
        // Respecter les pr√©f√©rences utilisateur
        guard updater.automaticallyChecksForUpdates else {
            return
        }
        
        print("üîÑ V√©rification automatique p√©riodique des mises √† jour...")
        
        isManualCheck = false
        
        // V√©rification silencieuse
        updater.checkForUpdatesInBackground()
        lastCheckDate = Date()
    }
    
    /// **Met √† jour les pr√©f√©rences de mise √† jour**
    /// 
    /// Appel√© depuis la fen√™tre des pr√©f√©rences
    func updatePreferences(automaticCheck: Bool, automaticDownload: Bool) {
        let updater = updaterController.updater
        
        // Sauvegarde des pr√©f√©rences
        UserDefaults.standard.set(automaticCheck, forKey: "AutomaticUpdateCheck")
        UserDefaults.standard.set(automaticDownload, forKey: "AutomaticDownload")
        
        // Application imm√©diate
        updater.automaticallyChecksForUpdates = automaticCheck
        updater.automaticallyDownloadsUpdates = automaticDownload
        
        print("‚öôÔ∏è Pr√©f√©rences mises √† jour:")
        print("   - V√©rification auto: \(automaticCheck)")
        print("   - T√©l√©chargement auto: \(automaticDownload)")
    }
    
    // MARK: - Gestion des Callbacks Sparkle
    
    /// Appel√© par le delegate quand une v√©rification de mise √† jour se termine
    func handleUpdateCycleFinished(error: Error?, hasUpdate: Bool) {
        self.isCheckingForUpdates = false
        self.lastCheckDate = Date()
        
        if let error = error {
            self.handleSparkleError(error, isManual: self.isManualCheck)
        } else {
            // V√©rification termin√©e avec succ√®s
            self.lastError = nil
            
            // Si c'√©tait une v√©rification manuelle et qu'aucune mise √† jour n'a √©t√© trouv√©e,
            // afficher un message informatif
            if self.isManualCheck && !hasUpdate {
                self.showNoUpdateAlert()
            }
            
            // Log du r√©sultat
            if hasUpdate {
                print("‚úÖ Mise √† jour disponible trouv√©e")
            } else {
                print("‚úÖ Aucune mise √† jour - application √† jour")
            }
        }
        
        self.isManualCheck = false
    }
    
    /// Appel√© par le delegate avant qu'une mise √† jour soit install√©e
    func handleWillInstallUpdate(version: String) {
        print("üì¶ Installation de la mise √† jour: \(version)")
    }
    
    // MARK: - Gestion des R√©sultats
    
    /// G√®re les erreurs g√©n√©riques lors des op√©rations de mise √† jour
    private func handleSparkleError(_ error: Error, isManual: Bool) {
        let updateError: UpdateError
        
        // Log d√©taill√© de l'erreur pour le d√©bogage
        let nsError = error as NSError
        print("‚ùå Erreur Sparkle d√©taill√©e:")
        print("   - Domain: \(nsError.domain)")
        print("   - Code: \(nsError.code)")
        print("   - Description: \(nsError.localizedDescription)")
        print("   - UserInfo: \(nsError.userInfo)")
        
        // Conversion des erreurs courantes en erreurs m√©tier
        switch nsError.domain {
        case NSURLErrorDomain:
            switch nsError.code {
            case NSURLErrorNotConnectedToInternet, NSURLErrorNetworkConnectionLost:
                updateError = .networkUnavailable
            case NSURLErrorFileDoesNotExist, NSURLErrorResourceUnavailable:
                updateError = .feedNotFound
            case NSURLErrorBadURL, NSURLErrorUnsupportedURL:
                updateError = .invalidResponse
            case NSURLErrorServerCertificateHasBadDate, NSURLErrorServerCertificateUntrusted:
                updateError = .feedNotFound
            default:
                updateError = .invalidResponse
            }
        case "SUError":
            // Erreurs sp√©cifiques √† Sparkle
            switch nsError.code {
            case 1000: // SUNoUpdateError
                updateError = .noUpdatesAvailable
            case 2000: // SUInstallationError
                updateError = .installationFailed
            default:
                updateError = .invalidResponse
            }
        default:
            updateError = .invalidResponse
        }
        
        handleError(updateError, showAlert: isManual)
    }
    
    /// G√®re une erreur de mise √† jour
    private func handleError(_ error: UpdateError, showAlert: Bool = false) {
        lastError = error
        
        print("‚ùå Erreur de mise √† jour: \(error.localizedDescription)")
        
        if showAlert {
            Task { @MainActor in
                self.showErrorAlert(error)
            }
        }
    }
    
    // MARK: - Interface Utilisateur
    
    /// Affiche une alerte "Aucune mise √† jour"
    private func showNoUpdateAlert() {
        let alert = NSAlert()
        alert.messageText = "Optima est √† jour"
        alert.informativeText = "Vous utilisez d√©j√† la derni√®re version d'Optima."
        alert.alertStyle = .informational
        alert.addButton(withTitle: "OK")
        
        if let window = NSApplication.shared.keyWindow {
            alert.beginSheetModal(for: window)
        } else {
            alert.runModal()
        }
    }
    
    /// Affiche une alerte d'erreur
    private func showErrorAlert(_ error: UpdateError) {
        let alert = NSAlert()
        alert.messageText = "Erreur de mise √† jour"
        alert.informativeText = error.localizedDescription
        alert.alertStyle = .warning
        alert.addButton(withTitle: "OK")
        
        // Bouton "R√©essayer" pour certaines erreurs
        if case .networkUnavailable = error {
            alert.addButton(withTitle: "R√©essayer")
        }
        
        let response = alert.runModal()
        
        // G√©rer la r√©ponse "R√©essayer"
        if response == .alertSecondButtonReturn {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.checkForUpdatesManually()
            }
        }
    }
    
    // MARK: - Utilitaires
    
    /// R√©initialise les protections (pour les tests ou le d√©bogage)
    func resetUpdateProtections() {
        hasPerformedStartupCheck = false
        lastManualCheckTime = nil
        isCheckingForUpdates = false
        isManualCheck = false
        print("üîÑ Protections de mise √† jour r√©initialis√©es")
    }
    
    /// Formate la derni√®re date de v√©rification
    var lastCheckFormatted: String {
        guard let lastCheckDate = lastCheckDate else {
            return "Jamais"
        }
        
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        formatter.locale = Locale(identifier: "fr_FR")
        
        return formatter.string(from: lastCheckDate)
    }
    
    /// Retourne l'√©tat actuel des mises √† jour
    var currentStatus: String {
        if isCheckingForUpdates {
            return "V√©rification en cours..."
        } else if let error = lastError {
            return "Erreur: \(error.localizedDescription)"
        } else {
            return "Derni√®re v√©rification: \(lastCheckFormatted)"
        }
    }
    
    /// Retourne les informations de debug
    var debugInfo: String {
        let updater = updaterController.updater
        let feedURL = Bundle.main.object(forInfoDictionaryKey: "SUFeedURL") as? String ?? "Non configur√©e"
        let publicKey = Bundle.main.object(forInfoDictionaryKey: "SUPublicEDKey") as? String ?? "Non configur√©e"
        
        return """
        √âtat UpdateService:
        - Startup check effectu√©: \(hasPerformedStartupCheck)
        - V√©rification en cours: \(isCheckingForUpdates)
        - V√©rification manuelle: \(isManualCheck)
        - Derni√®re v√©rification manuelle: \(lastManualCheckTime?.description ?? "Jamais")
        - Derni√®re v√©rification: \(lastCheckFormatted)
        
        Configuration Sparkle:
        - Feed URL: \(feedURL)
        - Cl√© publique: \(publicKey)
        - V√©rification auto: \(updater.automaticallyChecksForUpdates)
        - T√©l√©chargement auto: \(updater.automaticallyDownloadsUpdates)
        """
    }
    
    /// Teste la configuration Sparkle et la connectivit√©
    func testSparkleConfiguration() {
        print("üîß Test de la configuration Sparkle...")
        
        let feedURL = Bundle.main.object(forInfoDictionaryKey: "SUFeedURL") as? String ?? "Non configur√©e"
        let publicKey = Bundle.main.object(forInfoDictionaryKey: "SUPublicEDKey") as? String ?? "Non configur√©e"
        
        print("   - Feed URL: \(feedURL)")
        print("   - Cl√© publique: \(publicKey)")
        
        // Test de connectivit√© basique
        if let url = URL(string: feedURL) {
            let task = URLSession.shared.dataTask(with: url) { data, response, error in
                DispatchQueue.main.async {
                    if let error = error {
                        print("‚ùå Erreur de connectivit√©: \(error.localizedDescription)")
                    } else if let httpResponse = response as? HTTPURLResponse {
                        print("‚úÖ Connectivit√© OK - Status: \(httpResponse.statusCode)")
                        if let data = data {
                            print("   - Taille des donn√©es: \(data.count) bytes")
                        }
                    }
                }
            }
            task.resume()
        }
    }
} 